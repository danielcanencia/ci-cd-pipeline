---

- hosts: "{{ lookup('ansible.builtin.env', 'DOCKERSLAVE_HOSTNAME') }}"
  become: yes

  pre_tasks:
    - name: "Update packages"
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      with_items:
        - postgresql
        - python3.11-dev
        - libpq-dev
        - libjpeg8-dev

    - name: "Install docker"
      ansible.builtin.apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - ca-certificates
        - curl
        - gnupg

    - name: "Add the docker gpg key"
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: "Add the docker repository"
      ansible.builtin.apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
        state: present

    - name: "Update apt and install docker"
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      with_items:
        - docker-ce
        - docker-ce-cli
        - containerd.io

    - name: "Configure docker"
      ansible.builtin.shell: |
        # Give current user docker permissions
        usermod -a -G docker "{{ lookup('ansible.builtin.env', 'USER') }}"
        systemctl restart docker
        # Fix docker socket permissions
        chmod 666 /var/run/docker.sock
        # Bind tango.with.django hostname to docker ip in /etc/hosts
        export DOCKER_IP=$(ip addr show eth0 | grep 'inet ' | awk '{print $2}' | cut -f1 -d'/')
        sh -c 'echo "${DOCKER_IP} tango.with.django" >> /etc/hosts'
      become: yes

    - name: "Install pip"
      ansible.builtin.apt:
        name: python3-pip
        state: present
      become: yes

    - name: "Install psycopg2"
      ansible.builtin.pip:
        name: psycopg2
        executable: pip3

    - name: "Enable and start postgresql service"
      ansible.builtin.service:
        name: postgresql
        state: started
        enabled: yes

    - name: "Install acl"
      ansible.builtin.apt:
        name: acl
        state: latest
        update_cache: true

  tasks:
    - name:
        "Create postgresql remote_tmp directory (fixes warning)]\n
        DESC [fixes warning: Module remote_tmp /home/db2inst1/.ansible/tmp
        did not exist and was created with a mode of 0700, ...]"
      ansible.builtin.file:
        path: /var/lib/postgresql/.ansible/tmp
        state: directory

    - name: "Modify remote_tmp directory owner and permissions"
      ansible.builtin.shell: |
        chown postgres:postgres /var/lib/postgresql/.ansible/tmp
        chmod 744 /var/lib/postgresql/.ansible/tmp
      become: yes

    - name: "Create database user"
      community.postgresql.postgresql_user:
        name: "{{ lookup('ansible.builtin.env', 'DB_USER') }}"
        password: "{{ lookup('ansible.builtin.env', 'DB_PASSWORD') }}"
        role_attr_flags: "CREATEDB"
        state: present
      become: yes
      become_user: postgres

    - name: "Create database"
      community.postgresql.postgresql_db:
        name: "{{ lookup('ansible.builtin.env', 'DB_NAME') }}"
        owner: "{{ lookup('ansible.builtin.env', 'DB_USER') }}"
        state: present
      become: yes
      become_user: postgres

    - name: "Get postgresql version"
      ansible.builtin.shell: |
        version=$(psql --version | awk '{ print $3 }')
        echo "${version%%.*}"
      register: psql_version

    - name: "Accept traffic from the docker network IP address"
      ansible.builtin.lineinfile:
        dest: "/etc/postgresql/{{ psql_version.stdout }}/main/pg_hba.conf"
        insertafter: "^local"
        firstmatch: true
        line: "{{ item }}"
        state: present
      with_items:
        - "host all all 172.17.01/16 trust"

    - name: "Listen to docker network"
      ansible.builtin.lineinfile:
        dest: "/etc/postgresql/{{ psql_version.stdout }}/main/postgresql.conf"
        line: "{{ item }}"
        state: present
      with_items:
        - "listen_addresses = 'localhost, 172.17.0.1'"

